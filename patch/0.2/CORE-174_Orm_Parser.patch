Index: src/Debug.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Debug.php	(revision ba02e72904627cf3713e9857bc20166744b31f8e)
+++ src/Debug.php	(revision 62b680009066f72d4b0bee628233aeb2f93b4992)
@@ -269,10 +269,7 @@
 
     private static function dumpCommandLine($error_message = null)
     {
-        echo $error_message . "\n";
-        echo "---------------------------------------------------------------------\n";
-
-        $debug_backtrace = self::get_backtrace();
+        $debug_backtrace = array_reverse(self::get_backtrace());
 
         if (isset($debug_backtrace[0]["file"]) && basename($debug_backtrace[0]["file"]) == "Error.php") {
             unset($debug_backtrace[0]);
@@ -282,18 +279,22 @@
             if (isset($trace["file"])) {
                 print $trace["file"] . ":" . $trace["line"] . "\n";
             } else {
-                if (isset($trace["class"]) && isset($debug_backtrace[$i + 1]["args"]) && isset($debug_backtrace[$i + 1]["args"][0][0])) {
-                    $operation = '<mark>' . basename(str_replace(array("Object: ", "\\"), array("", "/"), $debug_backtrace[$i + 1]["args"][0][0])) . $trace["type"] . $trace["function"] . '(' . implode(", ", $trace["args"]) . ')</mark>';
+                if (0 && isset($trace["class"]) && isset($debug_backtrace[$i + 1]["args"]) && isset($debug_backtrace[$i + 1]["args"][0])) {
+                    $operation = str_replace(array("Object: ", "\\"), array("", "/"), $debug_backtrace[$i + 1]["args"][0]) . $trace["type"] . $trace["function"] . '(' . implode(", ", $trace["args"]) . ')';
                 } else {
                     $operation = (
                         isset($trace["class"])
-                        ?  basename(str_replace("\\", "/", $trace["class"])) . $trace["type"] . $trace["function"]
+                        ?  basename(str_replace("\\", "/", $trace["class"])) . $trace["type"] . $trace["function"] . '(' . implode(", ", $trace["args"]) . ')'
                         : $trace["function"]
                     );
                 }
                 echo "Call " . $operation . "\n";
             }
         }
+
+        echo "---------------------------------------------------------------------\n";
+        echo $error_message . "\n";
+
         return null;
     }
 
Index: src/storage/adapters/DatabaseMongodb.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/storage/adapters/DatabaseMongodb.php	(revision ba02e72904627cf3713e9857bc20166744b31f8e)
+++ src/storage/adapters/DatabaseMongodb.php	(revision 62b680009066f72d4b0bee628233aeb2f93b4992)
@@ -179,6 +179,70 @@
     }
 
 
+    private function parser_WhereField($field)
+    {
+        $res 						                    = $field["value"];
+
+        if (isset($this->struct[$field["name"]])) {
+            if (is_array($this->struct[$field["name"]])) {
+                $struct_type 							= "array";
+            } else {
+                $arrStructType 							= explode(":", $this->struct[$field["name"]], 2);
+                $struct_type 							= $arrStructType[0];
+            }
+        } else {
+            $struct_type                                = null;
+        }
+        switch ($struct_type) {
+            case "arrayIncremental":
+            case "arrayOfNumber":
+            case "array":
+                if (is_array($field["value"]) && count($field["value"])) {
+                    if (!$this->isAssocArray($field["value"])) {
+                        $res 		                    = array('$in' => $field["value"]);
+                    }
+                } elseif (is_array($field["value"]) && !count($field["value"])) {
+                    $res                                = array();
+                } else {
+                    $res                                = null;
+                }
+                break;
+            case "boolean":
+            case "bool":
+                break;
+            case "date":
+            case "number":
+            case "timestamp":
+            case "primary":
+                if (is_array($field["value"]) && count($field["value"])) {
+                    $res 			                    = array(
+                                                            '$in' => (
+                                                                ($field["name"] == $this->key_name)
+                                                                ? $field["value"]
+                                                                : array_map('intval', $field["value"])
+                                                            )
+                                                        );
+                }
+                break;
+            case "string":
+            case "char":
+            case "text":
+            default:
+                if (is_array($field["value"]) && count($field["value"])) {
+                    $res 			                    = array(
+                                                            '$in' => (
+                                                                ($field["name"] == $this->key_name)
+                                                                ? $field["value"]
+                                                                : array_map('strval', $field["value"])
+                                                            )
+                                                        );
+                }
+        }
+
+        return $res;
+    }
+
+
     /**
      * @param $fields
      * @param bool $flag
@@ -188,7 +252,6 @@
     {
         $result                                                                     = null;
         $res 																		= array();
-        $struct 																	= $this->struct;
         if (is_array($fields) && count($fields)) {
             $fields                                                                 = $this->convertKey("ID", $fields);
 
@@ -232,10 +295,15 @@
                                                                                     );
                     continue;
                 }
-
-
-
-                $field 																= $this->normalizeField($name, $value);
+                $parser_action_or                                                   = false;
+                if (isset($value['$or'])) {
+                    $parser_action_or                                               = true;
+                    $field 													        = $this->normalizeField($name, $value['$or']);
+                } elseif (isset($value['$and'])) {
+                    $field 															= $this->normalizeField($name, $value['$and']);
+                } else {
+                    $field 															= $this->normalizeField($name, $value);
+                }
 
                 if ($field == "special") {
                     $res[$flag][$name]                                              = $value;
@@ -302,6 +370,25 @@
                             }
 
                             break;
+                        case "where":
+                            if (is_array($value)) {
+                                $field["value"]                                     = $value;
+                            }
+
+                            if ($parser_action_or) {
+                                $res['$or'][][$field["name"]]                       = $this->parser_WhereField($field);
+                            } else {
+                                $res["where"][$field["name"]]                       = $this->parser_WhereField($field);
+
+                            }
+                            break;
+                        case "where_OR":
+                            if (is_array($value)) {
+                                $field["value"]                                     = $value;
+                            }
+                            $res[][$field["name"]]                                  = $this->parser_WhereField($field);
+                            break;
+                        /**
                         case "where":
                         case "where_OR":
                             if (!is_array($value)) {
@@ -334,6 +421,7 @@
                                     }
                                     break;
                                 case "boolean":
+                                case "bool":
                                     break;
                                 case "date":
                                 case "number":
@@ -364,6 +452,7 @@
                                     }
                             }
                             break;
+                         **/
                         default:
                     }
                 }
Index: src/storage/adapters/DatabaseMysqli.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/storage/adapters/DatabaseMysqli.php	(revision 62b680009066f72d4b0bee628233aeb2f93b4992)
+++ src/storage/adapters/DatabaseMysqli.php	(revision 6f3d39aa90101f46366048ac662a9300cfb9a9e7)
@@ -200,221 +200,282 @@
         return $res;
     }
 
-    /**
-     * @param $fields
-     * @param bool $action
-     * @return mixed
-     */
-    protected function convertFields($fields, $action)
+
+    private function parser_SpecialFields($name, $values, $action = "AND")
     {
-        $result                                                                     = null;
-        $res 																		= array();
-        $struct 																	= $this->struct;
-        if (is_array($fields) && count($fields)) {
-            $fields                                                                 = $this->convertKey("_id", $fields);
-            if ($action == "where" && isset($fields['$or']) && is_array($fields['$or'])) {
-                $or                                                                 = $this->convertFields($fields['$or'], "where_OR");
-                if ($or) {
-                    $res['$or'] = $or;
-                }
-            }
-
-            unset($fields['$or']);
-            foreach ($fields as $name => $value) {
-                if ($name == "*") {
-                    if ($action == "select") {
-                        $res                                                        = null;
-                        $result["select"]                                           = "*";
-                        break;
-                    } else {
-                        continue;
-                    }
-                }
-
-                $name                                                               = str_replace("`", "", $name);
-                if (!is_null($value) && !is_array($value) && !is_object($value)) {
-                    $value                                                          = str_replace("`", "", $value);
-                }
-                if ($name == "key") {
-                    $name 															= $this->key_name;
-                } elseif (0 && strpos($name, "key") === 1) { //todo: esplode se hai un campo tipo pkey chediventa pID. da verificare perche esiste questa condizione
-                    $name 															= substr($name, 0, 1) . $this->key_name;
-                } elseif ($action == "select" && strpos($value, ".") > 0) { //todo: da valutare con il ritorno degl array che nn funziona es: read("campo_pippo => ciao.te = ["ciao"]["te"])
-                    $name 															= substr($value, 0, strpos($value, "."));
-                    $value 															= true;
-                }
-                if ($action == "select" && !is_array($value)) {
-                    $arrValue 														= explode(":", $value, 2);
-                    $value 															= ($arrValue[0] ? $arrValue[0] : true);
-                }
-
-                if ($action == "sort") {
-                    $res[$name] 													= "`" . str_replace(".", "`.`", $name) ."` " . (
-                        $value === "-1" || $value === "DESC" || $value === "desc"
-                                                                                        ? "DESC"
-                                                                                        : "ASC"
-                                                                                    );
-                    continue;
-                }
-
-                $field 																= $this->normalizeField($name, $value);
-                if ($field == "special") {
-                    if ($action == "where" || $action == "where_OR") {
-                        foreach ($value as $op => $subvalue) {
-                            switch ($op) {
-                                case '$gt':
-                                    $res[$name . '-' . $op] 				        = "`" . $name . "`" . " > " . $this->driver->toSql($subvalue, "Number");
-                                    break;
-                                case '$gte':
-                                    $res[$name . '-' . $op] 				        = "`" . $name . "`" . " >= " . $this->driver->toSql($subvalue, "Number");
-                                    break;
-                                case '$lt':
-                                    $res[$name . '-' . $op] 						= "`" . $name . "`" . " < " . $this->driver->toSql($subvalue, "Number");
-                                    break;
-                                case '$lte':
-                                    $res[$name . '-' . $op] 						= "`" . $name . "`" . " <= " . $this->driver->toSql($subvalue, "Number");
-                                    break;
-                                case '$eq':
-                                    $res[$name . '-' . $op] 						= "`" . $name . "`" . " = " . $this->driver->toSql($subvalue);
-                                    break;
-                                case '$regex':
-                                    $res[$name . '-' . $op] 						= "`" . $name . "`" . " LIKE " . $this->driver->toSql(str_replace(array("(.*)", "(.+)", ".*", ".+", "*", "+"), "%", $subvalue));
-                                    break;
-                                case '$in':
-                                    if (is_array($subvalue)) {
-                                        $res[$name . '-' . $op]                     = "`" . $name . "`" . " IN('" . str_replace(", ", "', '", $this->driver->toSql(implode(", ", $subvalue), "Text", false)) . "')";
-                                    } else {
-                                        $res[$name . '-' . $op]                     = "`" . $name . "`" . " IN('" . str_replace(",", "', '", $this->driver->toSql($subvalue, "Text", false)) . "')";
-                                    }
-                                    break;
-                                case '$nin':
-                                    if (is_array($subvalue)) {
-                                        $res[$name . '-' . $op] 					= "`" . $name . "`" . " NOT IN('" . str_replace(", ", "', '", $this->driver->toSql(implode(", ", $subvalue), "Text", false)) . "')";
-                                    } else {
-                                        $res[$name . '-' . $op] 					= "`" . $name . "`" . " NOT IN('" . str_replace(",", "', '", $this->driver->toSql($subvalue, "Text", false)) . "')";
-                                    }
-                                    break;
-                                case '$ne':
-                                    $res[$name . '-' . $op] 						= "`" . $name . "`" . " <> " . $this->driver->toSql($subvalue);
-                                    break;
-                                case '$inset':
-                                    $res[$name . '-' . $op] 						= " FIND_IN_SET(" . $this->driver->toSql(str_replace(",", "','", $subvalue)) . ", `" . $name . "`)";
-                                    break;
-                                default:
-                            }
-                        }
-                    }
-                } else {
-                    switch ($action) {
-                        case "select":
-                            $res[$name]         									= $field["name"];
-                            break;
-                        case "insert":
-                            $res["head"][$name]         							= $field["name"];
-                            if (is_array($field["value"])) {
-                                if ($this->isAssocArray($field["value"])) {
-                                    $res["body"][$name]                             = "'" . str_replace("'", "\\'", json_encode($field["value"])) . "'";
-                                } else {
-                                    $res["body"][$name]                             = $this->driver->toSql(implode(",", array_unique($field["value"])));
-                                }
-                            } elseif (is_null($field["value"])) {
-                                $res["body"][$name]         						= "NULL";
-                            } else {
-                                $res["body"][$name]         						= $this->driver->toSql($field["value"]);
-                            }
-                            break;
-                        case "update":
-                            if (is_array($field["value"])) {
-                                switch ($field["op"]) {
-                                    case "++":
-                                        break;
-                                    case "--":
-                                        break;
-                                    case "+":
-                                        if ($this->isAssocArray($field["value"])) {
-                                        } else {
-                                            $res[$name] 							= "`" . $field["name"] . "` = " . "CONCAT(`"  . $field["name"] . "`, IF(`"  . $field["name"] . "` = '', '', ','), " . $this->driver->toSql(implode(",", array_unique($field["value"]))) . ")";
-                                        }
-                                        break;
-                                    default:
-                                        if ($this->isAssocArray($field["value"])) {
-                                            $res[$name]                             = "`" . $field["name"] . "` = " . "'" . str_replace("'", "\\'", json_encode($field["value"])) . "'";
-                                        } else {
-                                            $res[$name]                             = "`" . $field["name"] . "` = " . $this->driver->toSql(implode(",", array_unique($field["value"])));
-                                        }
-                                }
-                            } else {
-                                switch ($field["op"]) {
-                                    case "++":
-                                        $res[$name] = $res[$name] . " + 1";
-                                        break;
-                                    case "--":
-                                        $res[$name] = $res[$name] . " - 1";
-                                        break;
-                                    case "+":
-                                        $res[$name] 								= "`" . $field["name"] . "` = " . "CONCAT(`"  . $field["name"] . "`, IF(`"  . $field["name"] . "` = '', '', ','), " . $this->driver->toSql($field["value"]) . ")";
-                                        break;
-                                    default:
-                                        if (is_null($field["value"])) {
-                                            $res[$name]         			        = "`" . $field["name"] . "` = NULL";
-                                        } else {
-                                            $res[$name]         			        = "`" . $field["name"] . "` = " . $this->driver->toSql($field["value"]);
-                                        }
-                                }
-                            }
-                            break;
-                        case "where":
-                        case "where_OR":
-                            if (!is_array($value)) {
-                                $value                                              = $field["value"];
-                            }
-                            if ($field["name"] == $this->key_name) {
-                                $value 												= $this->convertID($value);
-                            }
-                            if (isset($struct[$field["name"]])) {
-                                if (is_array($struct[$field["name"]])) {
-                                    $struct_type 								    = "array";
-                                } else {
-                                    $arrStructType 									= explode(":", $struct[$field["name"]], 2);
-                                    $struct_type 									= $arrStructType[0];
-                                }
-                            } else {
-                                $struct_type                                        = null;
-                            }
-                            switch ($struct_type) {
-                                case "arrayIncremental":
-                                case "arrayOfNumber":
-                                case "array":
-                                    if (is_array($value) && count($value)) {
-                                        foreach ($value as $item) {
-                                            $res[$name][] 							= "FIND_IN_SET(" . $this->driver->toSql($item) . ", `" . $field["name"] . "`)";
-                                        }
-                                        $res[$name] 								= "(" . implode(" OR ", $res[$name]) . ")";
-                                    }
-                                    break;
-                                case "boolean":
-                                case "date":
-                                case "number":
-                                case "timestamp":
-                                case "primary":
-                                case "string":
-                                case "char":
-                                case "text":
-                                default:
-                                    if (is_array($value)) {
-                                        if (count($value)) {
-                                            $res[$name]                             = "`" . $field["name"] . "` " . "IN(" . $this->valueToFunc($value, $struct_type) . ")";
-                                        }
-                                    } elseif (is_null($value)) {
-                                        $res[$name] 							    = "`" . $field["name"] . "` " . " is null";
-                                    } elseif (empty($value)) {
-                                        $res[$name] 							    = "`" . $field["name"] . "` = ''";
-                                    } else {
-                                        $res[$name] 							    = "`" . $field["name"] . "` = " . $this->valueToFunc($value, $struct_type);
-                                    }
-                            }
+        $res                                            = array();
+        foreach ($values as $op => $value) {
+            switch ($op) {
+                case '$gt':
+                    $res[$op] 				            = "`" . $name . "`" . " > " . $this->driver->toSql($value, "Number");
+                    break;
+                case '$gte':
+                    $res[$op] 				            = "`" . $name . "`" . " >= " . $this->driver->toSql($value, "Number");
+                    break;
+                case '$lt':
+                    $res[$op] 						    = "`" . $name . "`" . " < " . $this->driver->toSql($value, "Number");
+                    break;
+                case '$lte':
+                    $res[$op] 						    = "`" . $name . "`" . " <= " . $this->driver->toSql($value, "Number");
+                    break;
+                case '$eq':
+                    $res[$op] 						    = "`" . $name . "`" . " = " . $this->driver->toSql($value);
+                    break;
+                case '$regex':
+                    $res[$op] 						    = "`" . $name . "`" . " LIKE " . $this->driver->toSql(str_replace(array("(.*)", "(.+)", ".*", ".+", "*", "+"), "%", $value));
+                    break;
+                case '$in':
+                    if (is_array($value)) {
+                        $res[$op]                       = "`" . $name . "`" . " IN('" . str_replace(", ", "', '", $this->driver->toSql(implode(", ", $value), "Text", false)) . "')";
+                    } else {
+                        $res[$op]                       = "`" . $name . "`" . " IN('" . str_replace(",", "', '", $this->driver->toSql($value, "Text", false)) . "')";
+                    }
+                    break;
+                case '$nin':
+                    if (is_array($value)) {
+                        $res[$op] 					    = "`" . $name . "`" . " NOT IN('" . str_replace(", ", "', '", $this->driver->toSql(implode(", ", $value), "Text", false)) . "')";
+                    } else {
+                        $res[$op] 					    = "`" . $name . "`" . " NOT IN('" . str_replace(",", "', '", $this->driver->toSql($value, "Text", false)) . "')";
+                    }
+                    break;
+                case '$ne':
+                    $res[$op] 						    = "`" . $name . "`" . " <> " . $this->driver->toSql($value);
+                    break;
+                case '$inset':
+                    $res[$op] 						    = " FIND_IN_SET(" . $this->driver->toSql(str_replace(",", "','", $value)) . ", `" . $name . "`)";
+                    break;
+                default:
+            }
+        }
+
+        return "(" . implode(" " . $action . " ", $res) . ")";
+    }
+
+    private function parser_SelectField($field)
+    {
+        return $field["name"];
+    }
+
+    private function parser_InsertField($field)
+    {
+        $res                                            = null;
+        if (is_array($field["value"])) {
+            if ($this->isAssocArray($field["value"])) {
+                $res                                    = "'" . str_replace("'", "\\'", json_encode($field["value"])) . "'";
+            } else {
+                $res                                    = $this->driver->toSql(implode(",", array_unique($field["value"])));
+            }
+        } elseif (is_null($field["value"])) {
+            $res         						        = "NULL";
+        } elseif (is_bool($field["value"])) {
+            $res         						        = (int) $field["value"];
+        } else {
+            $res         						        = $this->driver->toSql($field["value"]);
+        }
+
+        return $res;
+    }
+
+    private function parser_UpdateField($field)
+    {
+        $res                                            = null;
+        if (is_array($field["value"])) {
+            switch ($field["op"]) {
+                case "++":
+                    break;
+                case "--":
+                    break;
+                case "+":
+                    if ($this->isAssocArray($field["value"])) {
+                    } else {
+                        $res 							= "`" . $field["name"] . "` = " . "CONCAT(`"  . $field["name"] . "`, IF(`"  . $field["name"] . "` = '', '', ','), " . $this->driver->toSql(implode(",", array_unique($field["value"]))) . ")";
+                    }
+                    break;
+                default:
+                    if ($this->isAssocArray($field["value"])) {
+                        $res                            = "`" . $field["name"] . "` = " . "'" . str_replace("'", "\\'", json_encode($field["value"])) . "'";
+                    } else {
+                        $res                            = "`" . $field["name"] . "` = " . $this->driver->toSql(implode(",", array_unique($field["value"])));
+                    }
+            }
+        } else {
+            switch ($field["op"]) {
+                case "++":
+                    $res                                = "`" . $field["name"] . "` = `" . $field["name"] . "` + 1";
+                    break;
+                case "--":
+                    $res                                = "`" . $field["name"] . "` = `" . $field["name"] . "` - 1";
+                    break;
+                case "+":
+                    $res 						        = "`" . $field["name"] . "` = " . "CONCAT(`"  . $field["name"] . "`, IF(`"  . $field["name"] . "` = '', '', ','), " . $this->driver->toSql($field["value"]) . ")";
+                    break;
+                default:
+                    if (is_null($field["value"])) {
+                        $res         			        = "`" . $field["name"] . "` = NULL";
+                    } elseif (is_bool($field["value"])) {
+                        $res         			        = "`" . $field["name"] . "` = " . (int) $field["value"];
+                    } else {
+                        $res         			        = "`" . $field["name"] . "` = " . $this->driver->toSql($field["value"]);
+                    }
+            }
+        }
+        return $res;
+    }
+    private function parser_DeleteField($field)
+    {
+        //todo: to implement
+    }
+
+    private function parser_WhereField($field)
+    {
+        $res                                            = null;
+        $value                                          = $field["value"];
+
+        if ($field["name"] == $this->key_name) {
+            $value 										= $this->convertID($value);
+        }
+        if (isset($this->struct[$field["name"]])) {
+            if (is_array($this->struct[$field["name"]])) {
+                $struct_type 							= "array";
+            } else {
+                $arrStructType 							= explode(":", $this->struct[$field["name"]], 2);
+                $struct_type 							= $arrStructType[0];
+            }
+        } else {
+            $struct_type                                = null;
+        }
+        switch ($struct_type) {
+            case "arrayIncremental":
+            case "arrayOfNumber":
+            case "array":
+                if (is_array($value) && count($value)) {
+                    foreach ($value as $item) {
+                        $res[] 							= "FIND_IN_SET(" . $this->driver->toSql($item) . ", `" . $field["name"] . "`)";
+                    }
+                    $res 								= "(" . implode(" OR ", $res) . ")";
+                }
+                break;
+            case "boolean":
+            case "bool":
+            case "date":
+            case "number":
+            case "timestamp":
+            case "primary":
+            case "string":
+            case "char":
+            case "text":
+            default:
+                if (is_array($value)) {
+                    if (count($value)) {
+                        $res                            = "`" . $field["name"] . "` " . "IN(" . $this->valueToFunc($value, $struct_type) . ")";
+                    }
+                } elseif (is_null($value)) {
+                    $res 							    = "`" . $field["name"] . "` " . " is null";
+                } elseif (empty($value)) {
+                    $res 							    = "`" . $field["name"] . "` = ''";
+                } else {
+                    $res 							    = "`" . $field["name"] . "` = " . $this->valueToFunc($value, $struct_type);
+                }
+        }
+
+        return $res;
+    }
+
+    /**
+     * @param $fields
+     * @param bool $action
+     * @return mixed
+     */
+    protected function convertFields($fields, $action)
+    {
+        $result                                                                     = null;
+        $res 																		= array();
+        if (is_array($fields) && count($fields)) {
+            $fields                                                                 = $this->convertKey("_id", $fields);
+            if ($action == "where" && isset($fields['$or']) && is_array($fields['$or'])) {
+                $or                                                                 = $this->convertFields($fields['$or'], "where_OR");
+                if ($or) {
+                    $res['$or']                                                     = $or;
+                }
+            }
+            unset($fields['$or']);
+
+            foreach ($fields as $name => $value) {
+                if ($name == "*") {
+                    if ($action == "select") {
+                        $res                                                        = null;
+                        $result["select"]                                           = "*";
+                        break;
+                    } else {
+                        continue;
+                    }
+                }
+
+                $name                                                               = str_replace("`", "", $name);
+                if (!is_null($value) && !is_array($value) && !is_object($value)) {
+                    $value                                                          = str_replace("`", "", $value);
+                }
+                if ($name == "key") {
+                    $name 															= $this->key_name;
+                } elseif (0 && strpos($name, "key") === 1) { //todo: esplode se hai un campo tipo pkey chediventa pID. da verificare perche esiste questa condizione
+                    $name 															= substr($name, 0, 1) . $this->key_name;
+                } elseif ($action == "select" && strpos($value, ".") > 0) { //todo: da valutare con il ritorno degl array che nn funziona es: read("campo_pippo => ciao.te = ["ciao"]["te"])
+                    $name 															= substr($value, 0, strpos($value, "."));
+                    $value 															= true;
+                }
+                if ($action == "select" && !is_array($value)) {
+                    $arrValue 														= explode(":", $value, 2);
+                    $value 															= ($arrValue[0] ? $arrValue[0] : true);
+                }
+
+                if ($action == "sort") {
+                    $res[$name] 													= "`" . str_replace(".", "`.`", $name) ."` " . (
+                        $value === "-1" || $value === "DESC" || $value === "desc"
+                                                                                        ? "DESC"
+                                                                                        : "ASC"
+                                                                                    );
+                    continue;
+                }
+
+                if (isset($value['$or'])) {
+                    $parser_action                                                  = "OR";
+                    $field 													        = $this->normalizeField($name, $value['$or']);
+                    $special                                                        = $value['$or'];
+                } elseif (isset($value['$and'])) {
+                    $parser_action                                                  = "AND";
+                    $field 															= $this->normalizeField($name, $value['$and']);
+                    $special                                                        = $value['$and'];
+                } else {
+                    $parser_action                                                  = "AND";
+                    $field 															= $this->normalizeField($name, $value);
+                    $special                                                        = $value;
+                }
+
+
+                if ($field == "special") {
+                    $res[$name]                                                     = self::parser_SpecialFields($name, $special, $parser_action);
+                } else {
+                    switch ($action) {
+                        case "select":
+                            $res[$name]         							        = self::parser_SelectField($field);
                             break;
-                        default:
+                        case "insert":
+                            $res["head"][$name]         							= $field["name"];
+                            $res["body"][$name]         							= self::parser_InsertField($field);
+                            break;
+                        case "update":
+                            $res[$name]         							        = self::parser_UpdateField($field);
+                            break;
+                        case "delete":
+                            $res[$name]         							        = self::parser_DeleteField($field);
+                            break;
+                        case "where":
+                        case "where_OR":
+                            if (is_array($value)) {
+                                $field["value"]                                     = $value;
+                            }
+                            $res[$name]         							        = self::parser_WhereField($field);
+                            break;
                     }
                 }
             }
Index: src/storage/DatabaseAdapter.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/storage/DatabaseAdapter.php	(revision 6f3d39aa90101f46366048ac662a9300cfb9a9e7)
+++ src/storage/DatabaseAdapter.php	(revision 029793e0d44023f0e712ebfedcfb8264e5b12a28)
@@ -232,22 +232,22 @@
                 $query["from"]                                      = $this->getTable("name");
 
                 if ($action == "read") {
-                    $query = $query + $this->convertFields($this->select, "select");
+                    $query                                          = $query + $this->convertFields($this->select, "select");
                 }
                 if ($action == "insert" || $action == "write") {
-                    $query = $query + $this->convertFields($this->insert, "insert");
+                    $query                                          = $query + $this->convertFields($this->insert, "insert");
                 }
                 if ($action == "update" || $action == "write") {
-                    $query = $query + $this->convertFields($this->set, "update");
+                    $query                                          = $query + $this->convertFields($this->set, "update");
                 }
                 if ($action != "insert") {
-                    $query = $query + $this->convertFields($this->where, "where");
+                    $query                                          = $query + $this->convertFields($this->where, "where");
                 }
                 if ($action == "read" && $this->sort) {
-                    $query = $query + $this->convertFields($this->sort, "sort");
+                    $query                                          = $query + $this->convertFields($this->sort, "sort");
                 }
                 if ($action == "read" && $this->limit) {
-                    $query["limit"] = $this->limit;
+                    $query["limit"]                                 = $this->limit;
                 }
             }
         } else {
@@ -1189,6 +1189,7 @@
                     }
                     break;
                 case "boolean":
+                case "bool":
                     if (is_array($value) || is_object($value)) {
                         $fields[$name]                                      = false;
                     } elseif (strrpos($value, "++") === strlen($value) -2) {
